{"version":3,"sources":["webpack:///./node_modules/@mapbox/dr-ui/search/search-provider.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAqB,gDAAgD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe,GAAG,wCAAwC;;AAEjS;AACS;AACmC;AAC7B;;AAEzC,qBAAqB,4CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,4CAAK,eAAe,uEAAc;AAC1D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,eAAe,4CAAK,eAAe,mEAAU;AAClD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,0BAA0B,4CAAK,eAAe,qDAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,OAAO;AACP,KAAK;AACL;;AAEA;;AAEe,qEAAM,E","file":"search-provider.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchProvider, WithSearch } from '@elastic/react-search-ui';\nimport { SearchBox } from './search-box';\n\nclass Search extends React.PureComponent {\n  render() {\n    const {\n      connector,\n      resultsOnly,\n      useModal\n    } = this.props;\n\n    function handleMapContext({\n      isLoading,\n      searchTerm,\n      setSearchTerm,\n      results,\n      trackClickThrough,\n      wasSearched,\n      reset\n    }) {\n      return {\n        isLoading,\n        searchTerm,\n        setSearchTerm,\n        results,\n        trackClickThrough,\n        wasSearched,\n        reset\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(SearchProvider, {\n      config: {\n        apiConnector: connector,\n        initialState: {\n          resultsPerPage: 10\n        },\n        trackUrlState: resultsOnly ? false : true,\n        // do not push search query to URL if using resultsOnly\n        searchQuery: {\n          facets: {\n            site: {\n              type: 'value'\n            }\n          }\n        }\n      }\n    }, /*#__PURE__*/React.createElement(WithSearch, {\n      mapContextToProps: handleMapContext\n    }, ({\n      isLoading,\n      searchTerm,\n      setSearchTerm,\n      results,\n      trackClickThrough,\n      wasSearched,\n      reset\n    }) => {\n      return /*#__PURE__*/React.createElement(SearchBox, _extends({\n        searchTerm: searchTerm,\n        trackClickThrough: trackClickThrough,\n        setSearchTerm: setSearchTerm,\n        results: results,\n        wasSearched: wasSearched,\n        isLoading: isLoading,\n        reset: reset\n      }, this.props, {\n        useModal: useModal && !resultsOnly // disable modal if resultsOnly === true\n\n      }));\n    }));\n  }\n\n}\n\nexport default Search;"],"sourceRoot":""}